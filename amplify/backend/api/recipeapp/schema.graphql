type Recipe
@model
@auth(rules: [{allow: public, operations: [read]}])
@key(name: "recipesByUserId", fields: ["userId"], queryField: "getRecipesByUserId")
{
  id: ID!
  title: String!
  description: String
  image: [String]
  steps: [Step] @connection(name: "RecipeStep")
  category: Category @connection(name: "RecipeCategory")
  country: Country @connection(name: "CountryRecipe")
  userId: ID!
  user: User @connection(fields: ["userId"])
  likes: [Like] @connection(keyName: "likesByRecipeId", fields: ["id"])
}

type Step @model @auth(rules: [{allow: public, operations: [read]}]) {
  id: ID!
  description: String!
  recipe: Recipe @connection(name: "RecipeStep")
  images: [String]
}

type Category @model @auth(rules: [{allow: public, operations: [read]}]) {
  id: ID!
  title: String!
  image: String!
  recipe: [Recipe] @connection(name: "RecipeCategory")
}
enum CookingDuration {
  ZeroBetweenFifteen
  FifteenBetweenThirty
  ThirtyBetweenFourtyFive
  FourtyFiveBetweenSixty
  SixtyPlus
}

enum Serves {
  OneBetweenTwo
  TwoBetweenFour
  FourBetweenSix
  SixBetweenEight
  EightBetweenTen
  TenPlus
}

enum PreparationTime {
  ZeroBetweenFifteen
  FifteenBetweenThirty
  ThirtyBetweenFourtyFive
  FourtyFiveBetweenSixty
  SixtyPlus
}

type Country @model @auth(rules: [{allow: public, operations: [read]}]) {
  id: ID!
  flag: String!
  name: String!
  recipes: [Recipe] @connection(name: "CountryRecipe")
}

type User
@model
@auth(rules: [{allow: public, operations: [read]}]){
  id: ID!
  email: String!
  fullname: String!
  avatar: String!
  recipes: [Recipe] @connection(keyName: "recipesByUserId", fields: ["id"])
  likes: [Like] @connection(keyName: "likeByUserId", fields: ["id"])
}
type Following
  @model
  @auth(rules: [{allow: public, operations: [read]}])
  @key(
    name: "followingByUserId"
    fields: ["followerId"]
    queryField: "getFollowingsByUserId"
  )
  @key(
    name: "isFollowing"
    fields: ["followingId", "followerId"]
    queryField: "getIsFollowing"
  )
  @key(
    name: "followersByUserId"
    fields: ["followingId"]
    queryField: "getFollowersByUserId"
  ) {
  id: ID
  followerId: ID!
  followingId: ID!
  follower: User @connection(fields: ["followerId"])
  following: User @connection(fields: ["followingId"])
}

type Like
  @model
  @auth(rules: [{allow: public, operations: [read]}])
  @key(name: "likesByRecipeId", fields: ["recipeId"])
  @key(name: "likeByUserId", fields: ["userId"], queryField: "likesByUserId") {
  id: ID
  userId: ID!
  recipeId: ID!
  recipe: Recipe @connection(fields: ["recipeId"])
  user: User @connection(fields: ["userId"])
}

type ModelRecipeConnection {
  items: [Recipe]
  nextToken: String
  scannedCount: Int
  count: Int
}

type ModelUserConnection {
  items: [User]
  nextToken: String
  scannedCount: Int
  count: Int
}

type ModelLikeConnection {
  items: [Like]
  nextToken: String
  scannedCount: Int
  count: Int
}

type ModelFollowingConnection {
  items: [Following]
  nextToken: String
  scannedCount: Int
  count: Int
}

#hikaye,comment,list,beğeniTablosu,kiminDenediği
